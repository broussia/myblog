{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/about/nohup.out","path":"about/nohup.out","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/nohup.out","hash":"70bd1914634c0f50c3c896b5228862d339152599","modified":1637388272821},{"_id":"source/_posts/抖音视频的抓取.md","hash":"8f3318fdc1833a59b0791e79b413739b6e52fa7e","modified":1638342530374},{"_id":"source/_posts/抖音视频的抓取2.md","hash":"28527f89851fc9da443fe785fc6297cb5f466997","modified":1638342616401},{"_id":"source/about/index.md","hash":"3ce9cf635d1d9e1d09f9af82550ee7979ae92f3f","modified":1638172830109},{"_id":"source/about/nohup.out","hash":"70bd1914634c0f50c3c896b5228862d339152599","modified":1638172851038},{"_id":"source/link/index.md","hash":"0068cdd5931e3fb3e7d053008e3154905c9967d1","modified":1638341683926},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1636690602063},{"_id":"themes/butterfly/README.md","hash":"cedd13fcd8c75a68742265dd8eced4087e940ffd","modified":1636690602063},{"_id":"themes/butterfly/README_CN.md","hash":"459d6f3200863021bee1fe72a719aef236fb4090","modified":1636690602063},{"_id":"themes/butterfly/_config.yml","hash":"63d1a594969b7b5b97e1babebc7b85ef07c02e4f","modified":1636690602063},{"_id":"themes/butterfly/package-lock.json","hash":"26b74c31d19742504ebfc5644386441fbdbe5080","modified":1637306007961},{"_id":"themes/butterfly/package.json","hash":"8483152c9c77f55f10646a18d320b90452e4af25","modified":1637306007941},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1636690602063},{"_id":"themes/butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":1636690602063},{"_id":"themes/butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":1636690602063},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1636690602063},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":1636690602063},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1636690602063},{"_id":"themes/butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":1636690602063},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1636690602067},{"_id":"themes/butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1636690602067},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1636690602067},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1636690602067},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1636690602063},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1636690602063},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1636690602063},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"7d378e328a53cc99d5acc9682dce53f5eb61537d","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1377952022ee0a9eaa7a2fd1098f1571efc468d9","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8dafc2dcd8c33f70a546fee443f0b6d80b3cd243","modified":1636690602063},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1636690602067},{"_id":"themes/butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":1636690602067},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1636690602067},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":1636690602067},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1636690602067},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1636690602067},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1636690602067},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"65f2442e04c4defd16e7c1e67701d3bb41d9577a","modified":1636690602067},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1636690602067},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1636690602067},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1636690602067},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":1636690602067},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1636690602067},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1636690602067},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1636690602067},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":1636690602067},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1636690602067},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1636690602067},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1636690602067},{"_id":"themes/butterfly/source/css/var.styl","hash":"40c3f64422205a24e68ce1ad8fe8163f24fdd525","modified":1636690602067},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1636690602067},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1636690602067},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1636690602067},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1636690602067},{"_id":"themes/butterfly/source/js/main.js","hash":"b244f28124a46d7f1e8ef76ba6e925289691f93b","modified":1636690602071},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1636690602071},{"_id":"themes/butterfly/source/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1636690602071},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"b53a2d4f9c37b375a4446d2273dcfb7712d91b3e","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"933cb710d2dbcea25c6426a57c6f49d2f48b792c","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0366c658cdcff839aa1df2e2d252a03a53fd427e","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"b5525891f6affd02c1ea3b2327c026882efe428b","modified":1636690602067},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":1636690602067},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"e211efbd1952d4b1b881287aa43423133c1d166e","modified":1636690602067},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"85e72c70a0cef29e40be1968f5d23b06c6f8e3aa","modified":1636690602067},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"fa4b87e7b29bdd1f09eb1a30e06ba74b224f0ba2","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7feb755ca7c22da36bbad11e74ecd95fdcf3b879","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"dd8cdf639ba2b726437c77fa7aa8d5edbabe8f9b","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"98235fcda3b87ad6f7e91eafbed94d0d6ae847ca","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"2c5fb77c448ce0a734040c8ce532b28fed688899","modified":1636690602067},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"978c397d0966eaf9e6e2afd13866f8f4900b509f","modified":1636690602067},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":1636690602067},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":1636690602067},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"b0488ceacde74af139d66c8db5cb36cc21737b9b","modified":1636690602067},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1636690602067},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1636690602067},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"97fec1e814f88237862f4d800a35362b802f6625","modified":1636690602067},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"2cc49d3f6a6beb9f7bff93e292f88aa5681da1d0","modified":1636690602067},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":1636690602067},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1636690602067},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"917e0e399e117217184ca63d3eb5c4843bcccf7b","modified":1636690602067},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"f168f5c669978f633abe118cdcc4a12cfc883c01","modified":1636690602067},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"6befe4c51b86d0c1de130beeecad9e28d6442713","modified":1636690602067},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":1636690602067},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":1636690602067},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1636690602067},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":1636690602067},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1636690602067},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1636690602067},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1636690602067},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1636690602067},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1636690602067},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1636690602071},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"b1429e9f80ef6b9a77434819ffb87d90bdad25e8","modified":1636690602071},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c46a932257212f82e4a9974fbbc5de8878c8b383","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"36f3c603d2a2ecddaa6d2675a89d76ad94968f72","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1636690602063},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1636690602067},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1636690602067},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1636690602067},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":1636690602067},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1636690602067},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":1636690602067},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1636690602067},{"_id":"source/categories/index.md","hash":"cd7cfafdb83f104335b1cc40ee3e0c962733178a","modified":1638341753677},{"_id":"source/tag/index.md","hash":"47fa943a39e13cb9fa7f45418e9f2caed1d0c8a2","modified":1638339979847},{"_id":"source/tags/index.md","hash":"047e875468164e2ed0a5971c04dcb158f6018e87","modified":1638341725320},{"_id":"source/_data/link.yml","hash":"dbe896a006b4563d5f87616d6a4ea4287bbe6419","modified":1638342042334}],"Category":[{"name":"学习","_id":"ckwn6m0fi000057ovcaggd9z0"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":null,"link_list":[{"name":"寒梦","link":"https://siegelion.cn","avatar":"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E7%8C%9B%E7%94%B7.jpg","descr":"不是孟男的猛男"}]}]}],"Page":[{"title":"关于我","date":"2021-11-22T06:36:31.000Z","top_img":"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E9%A1%B5%E9%9D%A2%E8%83%8C%E6%99%AF.jpg","_content":"\n---\n开发届的一名小学生\n北邮渣硕在读\n期待成为大佬\nover 日后编辑\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2021-11-22 14:36:31\ntop_img: https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E9%A1%B5%E9%9D%A2%E8%83%8C%E6%99%AF.jpg\n---\n\n---\n开发届的一名小学生\n北邮渣硕在读\n期待成为大佬\nover 日后编辑\n","updated":"2021-11-29T08:00:30.109Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckwm9ozxo0000vxovaclven8o","content":"<hr>\n<p>开发届的一名小学生<br>北邮渣硕在读<br>期待成为大佬<br>over 日后编辑</p>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<hr>\n<p>开发届的一名小学生<br>北邮渣硕在读<br>期待成为大佬<br>over 日后编辑</p>\n"},{"title":"友情链接","date":"2021-11-22T06:34:37.000Z","top_img":"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E9%A1%B5%E9%9D%A2%E8%83%8C%E6%99%AF.jpg","type":"link","comments":0,"_content":"\n","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2021-11-22 14:34:37\ntop_img:  https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E9%A1%B5%E9%9D%A2%E8%83%8C%E6%99%AF.jpg\ntype: \"link\"\ncomments: false\n\n---\n\n","updated":"2021-12-01T06:54:43.926Z","path":"link/index.html","_id":"ckwm9ozxu0002vxov69ivbg04","layout":"page","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":null,"link_list":[{"name":"寒梦","link":"https://siegelion.cn","avatar":"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E7%8C%9B%E7%94%B7.jpg","descr":"大佬大佬"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""},{"title":"分类","date":"2021-12-01T06:26:47.000Z","type":"categories","comments":0,"top_img":"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E9%A1%B5%E9%9D%A2%E8%83%8C%E6%99%AF.jpg","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-12-01 14:26:47\ntype: \"categories\"\ncomments: false\ntop_img: https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E9%A1%B5%E9%9D%A2%E8%83%8C%E6%99%AF.jpg\n\n---\n","updated":"2021-12-01T06:55:53.677Z","path":"categories/index.html","_id":"ckwn5cdz30000w0ovalgp2po2","layout":"page","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":null,"link_list":[{"name":"寒梦","link":"https://siegelion.cn","avatar":"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E7%8C%9B%E7%94%B7.jpg","descr":"大佬大佬"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""},{"title":"标签","date":"2021-12-01T06:26:19.000Z","type":"tags","comments":0,"top_img":"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E9%A1%B5%E9%9D%A2%E8%83%8C%E6%99%AF.jpg","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-12-01 14:26:19\ntype: \"tags\"\ncomments: false\ntop_img: https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E9%A1%B5%E9%9D%A2%E8%83%8C%E6%99%AF.jpg\n\n---\n","updated":"2021-12-01T06:55:25.320Z","path":"tags/index.html","_id":"ckwn5gfgs0000xjovd3gyerxi","layout":"page","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":null,"link_list":[{"name":"寒梦","link":"https://siegelion.cn","avatar":"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E7%8C%9B%E7%94%B7.jpg","descr":"大佬大佬"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""}],"Post":[{"title":"抖音网页版小视频的抓取","date":"2021-11-20T04:58:01.000Z","_content":"\n# 抖音网页版小视频的抓取\n\n---\n\n> 作为自己的第一篇博客，先来立几个flag。希望自己能勤快点多更新，分享学习也好，生活也好，~~追番也好~~。其次是不能每天只打游戏不干活hhh\n\n### 准备工作\n\n1. 有一台电脑可以访问抖音网页版\n2. 电脑要能编写python\n3. 会安装python包\n\n## 安装selenium\n\n> [selenium](https://www.selenium.diev/)是用于测试web应用的工具，其直接运行在浏览器中，模拟人类对浏览器的操作。最最重要的是**简单**!\n\n​\t安装selenium只需要用win+R打开cmd，输入以下指令即可\n\n```cmd\npip install -U selenium\n```\n\n​\tselenium的学习也十分简单，本人边摸鱼边学习只花了3天的时间就基本弄清，学习视频可以参考[白月黑羽大佬](https://www.bilibili.com/video/BV1Z4411o7TA) 讲的很基础很细\n\n---\n\n## 任务目标\n\n​\t周一大清早，还没睡醒就被老板叫去开会。之后老板让我接手一个新的项目~~（杂活）~~ 工作大概是希望我能从抖音app上批量抓取视频再上传到他给的网站上。于是便有了这篇文章。 \n\n​\t一开始当然是按照学长的文档开始装安卓模拟器及相关环境。但很快就遇到了问题（装环境真的是我的噩梦...）。然后偶然发现室友在刷抖音网页版，真是雪中送炭一般，我的工作方向就立刻转变为了html代码的提取。\n\n---\n\n## 工作流程\n\n​\t此次selenium需要引入若干包，先列在这里\n\n    ```python\n    from selenium import webdriver\n    from selenium.webdriver.common.by import By\n    from selenium.webdriver.common.action_chains import ActionChains\n    import urllib\n    import urllib.request\n    import time\n    ```\n\n1. 打开抖音中某视频主的主页，这里的代码如下\n\n   ```python\n   wd = webdriver.Chrome()\n   wd.implicitly_wait(10)\n   wd.get(videoaddress)\n   time.sleep(6)\n   ```\n\n   ​\t其中videoaddress即为链接地址。至于为什么使用time.sleep(6)，那是因为抖音会检测自动打开的页面，弹出人机测试（其实就是经典右划滑块匹配）。这一步是计算机无法完成的，需要自己手动完成。\n\n2. 根据Xpath路径找到链接所在的代码区块，之后对这部分区块进行切割拼接（正是python的强项之处）代码如下\n\n   ```python\n    element = wd.find_element(By.XPATH, '//video[@tabindex = \"2\"]')\n    s = 'http:'+element.get_attribute('outerHTML').split(\"src\")[1].split(\"\\\"\")[1]\n   ```\n\n3. 将视频保存到本地，这里selenium并未给出相应方法，官方是这样解释的\n\n   > 虽然可以通过在Selenium的控制下单击浏览器的链接来开始下载, 但是API并不会暴露下载进度, 因此这是一种不理想的测试下载文件的方式. 因为下载文件并非模拟用户与Web平台交互的重要方面. 取而代之的是, 应使用Selenium(以及任何必要的cookie)查找链接, 并将其传递给例如[libcurl](https://curl.haxx.se/libcurl/)这样的HTTP请求库.\n\n   所以咱就调取了urllib.request()的方法保存到本地，代码倒是很简单\n\n   ```python\n   urllib.request.urlretrieve(s, './videos/'+str(i)+'.mp4')  # 保存视频\n   time.sleep(2)\n   ```\n\n   这里又使用了sleep方法是为了等待页面的加载，不然之后的点击操作无法进行\n\n4. 点击网页中的下箭头切换到下一个视频，原理就是找到这个箭头对应的代码之后简单点击就可以\n\n   ```python\n   mouse = ActionChains(wd)\n   element2 = wd.find_element(By.CLASS_NAME,'xgplayer-playswitch-next')\n   mouse.click(element2).perform()\n   ```\n\n    \n\n5. 这样就写好了，代码完成了对抖音视频的抓取，对了最后别忘记关掉测试的网页\n\n```python\nwd.quit()\n```\n\n​\t完整代码附在文末。\n\n---\n\n## 总结 \n\n​\t其实我认为，不管当下是做小的杂活还是接大的项目，我的目的是了解相关的技术，见多识广后再遇到类似问题就会心里有数，不慌张。而且不用去实验室坐牢，坐在宿舍快乐学习hhh\n\n\n\n\n\n\n\n完整代码如下\n\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.action_chains import ActionChains\nimport urllib\nimport urllib.request\nimport time\n############\nvideoaddress = ''\n#视频主的链接地址\nrangeNum = 50\n#爬取视频的总数（循环次数）\n############\nwd = webdriver.Chrome()\nwd.implicitly_wait(10)\nwd.get(videoaddress)\ntime.sleep(6)\nmouse = ActionChains(wd)\nfor i in range(rangeNum):\n    element = wd.find_element(By.XPATH, '//video[@tabindex = \"2\"]')\n    s = 'http:'+element.get_attribute('outerHTML').split(\"src\")[1].split(\"\\\"\")[1]\n    urllib.request.urlretrieve(s, './videos/'+str(i)+'.mp4') \n    time.sleep(2)\n    element2 = wd.find_element(By.CLASS_NAME,'xgplayer-playswitch-next')\n    mouse.click(element2).perform()\nwd.quit()\n\n```\n\n","source":"_posts/抖音视频的抓取.md","raw":"---\n\ntitle: 抖音网页版小视频的抓取 \ndate: 2021/11/20 12:58:01\ncategories: 学习\ntags: [selenium,爬虫,python]\n\n\n---\n\n# 抖音网页版小视频的抓取\n\n---\n\n> 作为自己的第一篇博客，先来立几个flag。希望自己能勤快点多更新，分享学习也好，生活也好，~~追番也好~~。其次是不能每天只打游戏不干活hhh\n\n### 准备工作\n\n1. 有一台电脑可以访问抖音网页版\n2. 电脑要能编写python\n3. 会安装python包\n\n## 安装selenium\n\n> [selenium](https://www.selenium.diev/)是用于测试web应用的工具，其直接运行在浏览器中，模拟人类对浏览器的操作。最最重要的是**简单**!\n\n​\t安装selenium只需要用win+R打开cmd，输入以下指令即可\n\n```cmd\npip install -U selenium\n```\n\n​\tselenium的学习也十分简单，本人边摸鱼边学习只花了3天的时间就基本弄清，学习视频可以参考[白月黑羽大佬](https://www.bilibili.com/video/BV1Z4411o7TA) 讲的很基础很细\n\n---\n\n## 任务目标\n\n​\t周一大清早，还没睡醒就被老板叫去开会。之后老板让我接手一个新的项目~~（杂活）~~ 工作大概是希望我能从抖音app上批量抓取视频再上传到他给的网站上。于是便有了这篇文章。 \n\n​\t一开始当然是按照学长的文档开始装安卓模拟器及相关环境。但很快就遇到了问题（装环境真的是我的噩梦...）。然后偶然发现室友在刷抖音网页版，真是雪中送炭一般，我的工作方向就立刻转变为了html代码的提取。\n\n---\n\n## 工作流程\n\n​\t此次selenium需要引入若干包，先列在这里\n\n    ```python\n    from selenium import webdriver\n    from selenium.webdriver.common.by import By\n    from selenium.webdriver.common.action_chains import ActionChains\n    import urllib\n    import urllib.request\n    import time\n    ```\n\n1. 打开抖音中某视频主的主页，这里的代码如下\n\n   ```python\n   wd = webdriver.Chrome()\n   wd.implicitly_wait(10)\n   wd.get(videoaddress)\n   time.sleep(6)\n   ```\n\n   ​\t其中videoaddress即为链接地址。至于为什么使用time.sleep(6)，那是因为抖音会检测自动打开的页面，弹出人机测试（其实就是经典右划滑块匹配）。这一步是计算机无法完成的，需要自己手动完成。\n\n2. 根据Xpath路径找到链接所在的代码区块，之后对这部分区块进行切割拼接（正是python的强项之处）代码如下\n\n   ```python\n    element = wd.find_element(By.XPATH, '//video[@tabindex = \"2\"]')\n    s = 'http:'+element.get_attribute('outerHTML').split(\"src\")[1].split(\"\\\"\")[1]\n   ```\n\n3. 将视频保存到本地，这里selenium并未给出相应方法，官方是这样解释的\n\n   > 虽然可以通过在Selenium的控制下单击浏览器的链接来开始下载, 但是API并不会暴露下载进度, 因此这是一种不理想的测试下载文件的方式. 因为下载文件并非模拟用户与Web平台交互的重要方面. 取而代之的是, 应使用Selenium(以及任何必要的cookie)查找链接, 并将其传递给例如[libcurl](https://curl.haxx.se/libcurl/)这样的HTTP请求库.\n\n   所以咱就调取了urllib.request()的方法保存到本地，代码倒是很简单\n\n   ```python\n   urllib.request.urlretrieve(s, './videos/'+str(i)+'.mp4')  # 保存视频\n   time.sleep(2)\n   ```\n\n   这里又使用了sleep方法是为了等待页面的加载，不然之后的点击操作无法进行\n\n4. 点击网页中的下箭头切换到下一个视频，原理就是找到这个箭头对应的代码之后简单点击就可以\n\n   ```python\n   mouse = ActionChains(wd)\n   element2 = wd.find_element(By.CLASS_NAME,'xgplayer-playswitch-next')\n   mouse.click(element2).perform()\n   ```\n\n    \n\n5. 这样就写好了，代码完成了对抖音视频的抓取，对了最后别忘记关掉测试的网页\n\n```python\nwd.quit()\n```\n\n​\t完整代码附在文末。\n\n---\n\n## 总结 \n\n​\t其实我认为，不管当下是做小的杂活还是接大的项目，我的目的是了解相关的技术，见多识广后再遇到类似问题就会心里有数，不慌张。而且不用去实验室坐牢，坐在宿舍快乐学习hhh\n\n\n\n\n\n\n\n完整代码如下\n\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.action_chains import ActionChains\nimport urllib\nimport urllib.request\nimport time\n############\nvideoaddress = ''\n#视频主的链接地址\nrangeNum = 50\n#爬取视频的总数（循环次数）\n############\nwd = webdriver.Chrome()\nwd.implicitly_wait(10)\nwd.get(videoaddress)\ntime.sleep(6)\nmouse = ActionChains(wd)\nfor i in range(rangeNum):\n    element = wd.find_element(By.XPATH, '//video[@tabindex = \"2\"]')\n    s = 'http:'+element.get_attribute('outerHTML').split(\"src\")[1].split(\"\\\"\")[1]\n    urllib.request.urlretrieve(s, './videos/'+str(i)+'.mp4') \n    time.sleep(2)\n    element2 = wd.find_element(By.CLASS_NAME,'xgplayer-playswitch-next')\n    mouse.click(element2).perform()\nwd.quit()\n\n```\n\n","slug":"抖音视频的抓取","published":1,"updated":"2021-12-01T07:08:50.374Z","_id":"ckwm9ozxr0001vxov0rau1tgn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"抖音网页版小视频的抓取\"><a href=\"#抖音网页版小视频的抓取\" class=\"headerlink\" title=\"抖音网页版小视频的抓取\"></a>抖音网页版小视频的抓取</h1><hr>\n<blockquote>\n<p>作为自己的第一篇博客，先来立几个flag。希望自己能勤快点多更新，分享学习也好，生活也好，<del>追番也好</del>。其次是不能每天只打游戏不干活hhh</p>\n</blockquote>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>有一台电脑可以访问抖音网页版</li>\n<li>电脑要能编写python</li>\n<li>会安装python包</li>\n</ol>\n<h2 id=\"安装selenium\"><a href=\"#安装selenium\" class=\"headerlink\" title=\"安装selenium\"></a>安装selenium</h2><blockquote>\n<p><a href=\"https://www.selenium.diev/\">selenium</a>是用于测试web应用的工具，其直接运行在浏览器中，模拟人类对浏览器的操作。最最重要的是<strong>简单</strong>!</p>\n</blockquote>\n<p>​    安装selenium只需要用win+R打开cmd，输入以下指令即可</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">pip install -U selenium<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>​    selenium的学习也十分简单，本人边摸鱼边学习只花了3天的时间就基本弄清，学习视频可以参考<a href=\"https://www.bilibili.com/video/BV1Z4411o7TA\">白月黑羽大佬</a> 讲的很基础很细</p>\n<hr>\n<h2 id=\"任务目标\"><a href=\"#任务目标\" class=\"headerlink\" title=\"任务目标\"></a>任务目标</h2><p>​    周一大清早，还没睡醒就被老板叫去开会。之后老板让我接手一个新的项目<del>（杂活）</del> 工作大概是希望我能从抖音app上批量抓取视频再上传到他给的网站上。于是便有了这篇文章。 </p>\n<p>​    一开始当然是按照学长的文档开始装安卓模拟器及相关环境。但很快就遇到了问题（装环境真的是我的噩梦…）。然后偶然发现室友在刷抖音网页版，真是雪中送炭一般，我的工作方向就立刻转变为了html代码的提取。</p>\n<hr>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><p>​    此次selenium需要引入若干包，先列在这里</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>by <span class=\"token keyword\">import</span> By\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>action_chains <span class=\"token keyword\">import</span> ActionChains\n<span class=\"token keyword\">import</span> urllib\n<span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>request\n<span class=\"token keyword\">import</span> time<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n<ol>\n<li><p>打开抖音中某视频主的主页，这里的代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">wd <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwd<span class=\"token punctuation\">.</span>implicitly_wait<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nwd<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>videoaddress<span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​    其中videoaddress即为链接地址。至于为什么使用time.sleep(6)，那是因为抖音会检测自动打开的页面，弹出人机测试（其实就是经典右划滑块匹配）。这一步是计算机无法完成的，需要自己手动完成。</p>\n</li>\n<li><p>根据Xpath路径找到链接所在的代码区块，之后对这部分区块进行切割拼接（正是python的强项之处）代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">element <span class=\"token operator\">=</span> wd<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span> <span class=\"token string\">'//video[@tabindex = \"2\"]'</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'http:'</span><span class=\"token operator\">+</span>element<span class=\"token punctuation\">.</span>get_attribute<span class=\"token punctuation\">(</span><span class=\"token string\">'outerHTML'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>将视频保存到本地，这里selenium并未给出相应方法，官方是这样解释的</p>\n<blockquote>\n<p>虽然可以通过在Selenium的控制下单击浏览器的链接来开始下载, 但是API并不会暴露下载进度, 因此这是一种不理想的测试下载文件的方式. 因为下载文件并非模拟用户与Web平台交互的重要方面. 取而代之的是, 应使用Selenium(以及任何必要的cookie)查找链接, 并将其传递给例如<a href=\"https://curl.haxx.se/libcurl/\">libcurl</a>这样的HTTP请求库.</p>\n</blockquote>\n<p>所以咱就调取了urllib.request()的方法保存到本地，代码倒是很简单</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>urlretrieve<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">'./videos/'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'.mp4'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 保存视频</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这里又使用了sleep方法是为了等待页面的加载，不然之后的点击操作无法进行</p>\n</li>\n<li><p>点击网页中的下箭头切换到下一个视频，原理就是找到这个箭头对应的代码之后简单点击就可以</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">mouse <span class=\"token operator\">=</span> ActionChains<span class=\"token punctuation\">(</span>wd<span class=\"token punctuation\">)</span>\nelement2 <span class=\"token operator\">=</span> wd<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>CLASS_NAME<span class=\"token punctuation\">,</span><span class=\"token string\">'xgplayer-playswitch-next'</span><span class=\"token punctuation\">)</span>\nmouse<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>element2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n</li>\n<li><p>这样就写好了，代码完成了对抖音视频的抓取，对了最后别忘记关掉测试的网页</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">wd<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>​    完整代码附在文末。</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    其实我认为，不管当下是做小的杂活还是接大的项目，我的目的是了解相关的技术，见多识广后再遇到类似问题就会心里有数，不慌张。而且不用去实验室坐牢，坐在宿舍快乐学习hhh</p>\n<p>完整代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>by <span class=\"token keyword\">import</span> By\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>action_chains <span class=\"token keyword\">import</span> ActionChains\n<span class=\"token keyword\">import</span> urllib\n<span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>request\n<span class=\"token keyword\">import</span> time\n<span class=\"token comment\">############</span>\nvideoaddress <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token comment\">#视频主的链接地址</span>\nrangeNum <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n<span class=\"token comment\">#爬取视频的总数（循环次数）</span>\n<span class=\"token comment\">############</span>\nwd <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwd<span class=\"token punctuation\">.</span>implicitly_wait<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nwd<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>videoaddress<span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nmouse <span class=\"token operator\">=</span> ActionChains<span class=\"token punctuation\">(</span>wd<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>rangeNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    element <span class=\"token operator\">=</span> wd<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span> <span class=\"token string\">'//video[@tabindex = \"2\"]'</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> <span class=\"token string\">'http:'</span><span class=\"token operator\">+</span>element<span class=\"token punctuation\">.</span>get_attribute<span class=\"token punctuation\">(</span><span class=\"token string\">'outerHTML'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>urlretrieve<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">'./videos/'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'.mp4'</span><span class=\"token punctuation\">)</span> \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    element2 <span class=\"token operator\">=</span> wd<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>CLASS_NAME<span class=\"token punctuation\">,</span><span class=\"token string\">'xgplayer-playswitch-next'</span><span class=\"token punctuation\">)</span>\n    mouse<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>element2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwd<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":null,"link_list":[{"name":"寒梦","link":"https://siegelion.cn","avatar":"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E7%8C%9B%E7%94%B7.jpg","descr":"不是孟男的猛男"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h1 id=\"抖音网页版小视频的抓取\"><a href=\"#抖音网页版小视频的抓取\" class=\"headerlink\" title=\"抖音网页版小视频的抓取\"></a>抖音网页版小视频的抓取</h1><hr>\n<blockquote>\n<p>作为自己的第一篇博客，先来立几个flag。希望自己能勤快点多更新，分享学习也好，生活也好，<del>追番也好</del>。其次是不能每天只打游戏不干活hhh</p>\n</blockquote>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>有一台电脑可以访问抖音网页版</li>\n<li>电脑要能编写python</li>\n<li>会安装python包</li>\n</ol>\n<h2 id=\"安装selenium\"><a href=\"#安装selenium\" class=\"headerlink\" title=\"安装selenium\"></a>安装selenium</h2><blockquote>\n<p><a href=\"https://www.selenium.diev/\">selenium</a>是用于测试web应用的工具，其直接运行在浏览器中，模拟人类对浏览器的操作。最最重要的是<strong>简单</strong>!</p>\n</blockquote>\n<p>​    安装selenium只需要用win+R打开cmd，输入以下指令即可</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">pip install -U selenium<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>​    selenium的学习也十分简单，本人边摸鱼边学习只花了3天的时间就基本弄清，学习视频可以参考<a href=\"https://www.bilibili.com/video/BV1Z4411o7TA\">白月黑羽大佬</a> 讲的很基础很细</p>\n<hr>\n<h2 id=\"任务目标\"><a href=\"#任务目标\" class=\"headerlink\" title=\"任务目标\"></a>任务目标</h2><p>​    周一大清早，还没睡醒就被老板叫去开会。之后老板让我接手一个新的项目<del>（杂活）</del> 工作大概是希望我能从抖音app上批量抓取视频再上传到他给的网站上。于是便有了这篇文章。 </p>\n<p>​    一开始当然是按照学长的文档开始装安卓模拟器及相关环境。但很快就遇到了问题（装环境真的是我的噩梦…）。然后偶然发现室友在刷抖音网页版，真是雪中送炭一般，我的工作方向就立刻转变为了html代码的提取。</p>\n<hr>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><p>​    此次selenium需要引入若干包，先列在这里</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>by <span class=\"token keyword\">import</span> By\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>action_chains <span class=\"token keyword\">import</span> ActionChains\n<span class=\"token keyword\">import</span> urllib\n<span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>request\n<span class=\"token keyword\">import</span> time<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n<ol>\n<li><p>打开抖音中某视频主的主页，这里的代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">wd <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwd<span class=\"token punctuation\">.</span>implicitly_wait<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nwd<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>videoaddress<span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​    其中videoaddress即为链接地址。至于为什么使用time.sleep(6)，那是因为抖音会检测自动打开的页面，弹出人机测试（其实就是经典右划滑块匹配）。这一步是计算机无法完成的，需要自己手动完成。</p>\n</li>\n<li><p>根据Xpath路径找到链接所在的代码区块，之后对这部分区块进行切割拼接（正是python的强项之处）代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">element <span class=\"token operator\">=</span> wd<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span> <span class=\"token string\">'//video[@tabindex = \"2\"]'</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'http:'</span><span class=\"token operator\">+</span>element<span class=\"token punctuation\">.</span>get_attribute<span class=\"token punctuation\">(</span><span class=\"token string\">'outerHTML'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>将视频保存到本地，这里selenium并未给出相应方法，官方是这样解释的</p>\n<blockquote>\n<p>虽然可以通过在Selenium的控制下单击浏览器的链接来开始下载, 但是API并不会暴露下载进度, 因此这是一种不理想的测试下载文件的方式. 因为下载文件并非模拟用户与Web平台交互的重要方面. 取而代之的是, 应使用Selenium(以及任何必要的cookie)查找链接, 并将其传递给例如<a href=\"https://curl.haxx.se/libcurl/\">libcurl</a>这样的HTTP请求库.</p>\n</blockquote>\n<p>所以咱就调取了urllib.request()的方法保存到本地，代码倒是很简单</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>urlretrieve<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">'./videos/'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'.mp4'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 保存视频</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这里又使用了sleep方法是为了等待页面的加载，不然之后的点击操作无法进行</p>\n</li>\n<li><p>点击网页中的下箭头切换到下一个视频，原理就是找到这个箭头对应的代码之后简单点击就可以</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">mouse <span class=\"token operator\">=</span> ActionChains<span class=\"token punctuation\">(</span>wd<span class=\"token punctuation\">)</span>\nelement2 <span class=\"token operator\">=</span> wd<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>CLASS_NAME<span class=\"token punctuation\">,</span><span class=\"token string\">'xgplayer-playswitch-next'</span><span class=\"token punctuation\">)</span>\nmouse<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>element2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n</li>\n<li><p>这样就写好了，代码完成了对抖音视频的抓取，对了最后别忘记关掉测试的网页</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">wd<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>​    完整代码附在文末。</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    其实我认为，不管当下是做小的杂活还是接大的项目，我的目的是了解相关的技术，见多识广后再遇到类似问题就会心里有数，不慌张。而且不用去实验室坐牢，坐在宿舍快乐学习hhh</p>\n<p>完整代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>by <span class=\"token keyword\">import</span> By\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>action_chains <span class=\"token keyword\">import</span> ActionChains\n<span class=\"token keyword\">import</span> urllib\n<span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>request\n<span class=\"token keyword\">import</span> time\n<span class=\"token comment\">############</span>\nvideoaddress <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token comment\">#视频主的链接地址</span>\nrangeNum <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n<span class=\"token comment\">#爬取视频的总数（循环次数）</span>\n<span class=\"token comment\">############</span>\nwd <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwd<span class=\"token punctuation\">.</span>implicitly_wait<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nwd<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>videoaddress<span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nmouse <span class=\"token operator\">=</span> ActionChains<span class=\"token punctuation\">(</span>wd<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>rangeNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    element <span class=\"token operator\">=</span> wd<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span> <span class=\"token string\">'//video[@tabindex = \"2\"]'</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> <span class=\"token string\">'http:'</span><span class=\"token operator\">+</span>element<span class=\"token punctuation\">.</span>get_attribute<span class=\"token punctuation\">(</span><span class=\"token string\">'outerHTML'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>urlretrieve<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">'./videos/'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'.mp4'</span><span class=\"token punctuation\">)</span> \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    element2 <span class=\"token operator\">=</span> wd<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>CLASS_NAME<span class=\"token punctuation\">,</span><span class=\"token string\">'xgplayer-playswitch-next'</span><span class=\"token punctuation\">)</span>\n    mouse<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>element2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwd<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"抖音网页版小视频的抓取2","date":"2021-11-30T05:13:13.000Z","cover":"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E6%8A%96%E9%9F%B32/%E6%8A%96%E9%9F%B32%E5%B0%81%E9%9D%A2.jpeg","_content":"  \n\n\n# 抖音视频的抓取2\n\n---\n\n> 上一篇实现了对指定用户抖音视频的批量下载工作，本篇重点解决滑块验证的相关问题。\n>\n> ***本篇所涉及验证码自动识别的算法成功率不高且仅是博主个人学习使用，若有商用痕迹均与本人无关，本人对此不负任何责任***\n\n## 问题分析\n\n滑块验证有两步操作，第一步是对图片进行分析找到缺口坐标，第二步是实现鼠标拖动滑块的功能。\n\n确定任务后，接下来先实现第二步。\n\n## 仿真的滑块拖拽动作\n\n找到滑块并不难，在html界面很容易就通过xpath定位到滑块的位置\n\n```python\nhuakuai = wd.find_element(By.XPATH,'//*[@id=\"secsdk-captcha-drag-wrapper\"]/div[2]')\n```\n\n之后使用曾经用过的拖拽方法dragAndDropBy让滑块移动一个距离就解决了\n\n```python\nwebdriver.ActionChains(driver).drag_and_drop_by_offset(sourceEle, targetEleXOffset, targetEleYOffset).perform()\n```\n\n运行时发现这样并不能完成验证，原来是这种直接拖拽的方法太**不像人**了[/笑哭]，所以我们另写一个方法来模拟人的滑动操作。\n\n```python\ndef get_track(distance):  # diatance表示滑块移动的距离\n\ttrack = []\n\tcurrent = 0\n\tmid = distance * 3 / 4\n\tt = 0.2\n\tv = 0\n\twhile current < distance:\n\t\tif current < mid:\n\t\t\ta = 2\n\t\telse:\n\t\t\ta = -3\n\t\tv0 = v\n\t\tv = v0 + a * t\n\t\tmove = v0 * t + 1 / 2 * a * t * t\n\t\tcurrent += move\n\t\ttrack.append(round(move))\n\treturn track\n```\n\n\n\n有了这个方法，我们只需要按照返回值依次拖拽滑块多次，最后再释放鼠标的点击，就能做到滑块的拖动了\n\n```python\nmouse = ActionChains(wd)\ntrack = get_track(getDistance())\nmouse.click_and_hold(huakuai).perform()\nfor x in track:\n    mouse.move_by_offset(x,0).perform()\ntime.sleep(0.5)\nmouse.release().perform()\n```\n\n---\n\n## 识别缺口位置\n\n这里有多种方法，以下是我所参考的两种\n\n1. 使用目标检测的方法训练一个模型，通过模型来预测每一次的缺口位置，这种方法需要准备百余张图片来标注并划分集合。采用YOLO或者Faster R-CNN方法进行训练，优点是预测准确率高，缺点是工作量较大\n2. 使用openCV对图像进行简单处理，通过相邻位置的灰度判断缺口位置，缺点就是预测准确率低，优点是工作量较小，*代码是现成的*。\n\n经过考虑还是先选择了方法2，先测试方法能不能跑通再进行优化。\n\n```python\nimport cv2\nimport numpy as np\n \ndef show(name):\n\tcv2.imshow('Show', name)\n\tcv2.waitKey(0)\n\tcv2.destroyAllWindows()\n \ndef main():\n\totemp = 'template.jpeg'\n\toblk = 'target.png'\n\ttarget = cv2.imread(oblk, 0)\n\ttemplate = cv2.imread(otemp, 0)\n\tw, h = target.shape[::-1]\n\ttemp = 'temp.jpg'\n\ttarg = 'targ.jpg'\n\tcv2.imwrite(temp, template)\n\tcv2.imwrite(targ, target)\n\ttarget = cv2.imread(targ)\n\ttarget = cv2.cvtColor(target, cv2.COLOR_BGR2GRAY)\n\ttarget = abs(255 - target)\n\tcv2.imwrite(targ, target)\n\ttarget = cv2.imread(targ)\n\ttemplate = cv2.imread(temp)\n\tresult = cv2.matchTemplate(target, template, cv2.TM_CCOEFF_NORMED)\n\tx, y = np.unravel_index(result.argmax(), result.shape)\n\t# 展示圈出来的区域\n\tprint(w,h)\n\tprint(x,y)\n\tprint(x*1.25)\n\tcv2.rectangle(template, (y, x), (y + w, x + h), (7, 249, 151), 2)\n\tshow(template)\n \nif __name__ == '__main__':\n\tmain()\n```\n\n这里先贴出该方法的源码，经过我的测试，返回的y值就是滑块需要移动的距离，但是很坑的一点是这个距离要随着显示器的缩放比例而调整，例如我的显示比例是150%，就需要返回2/3的y。\n\n最终效果如下所示\n\n![最终效果1](https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E6%8A%96%E9%9F%B32/%E6%8A%96%E9%9F%B32%20gif.gif)\n\n![最终效果2](https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E6%8A%96%E9%9F%B32/%E6%8A%96%E9%9F%B32%20gif2.gif)\n\n但是成功率并不高:-)\n\n\n\n## 后记\n\n本来这周打算用目标检测的方法重新实现缺口的识别，没想到老板说你这个先作为兴趣吧，让我去用手机模拟器上抖音app下视频，那这个系列就先这样了。日后有缘再更新~ ~~其实是完结了~~\n\n","source":"_posts/抖音视频的抓取2.md","raw":"---\n\ntitle: 抖音网页版小视频的抓取2\ndate: 2021/11/30 13:13:13\ncover: https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E6%8A%96%E9%9F%B32/%E6%8A%96%E9%9F%B32%E5%B0%81%E9%9D%A2.jpeg\ncategories: 学习\ntags: [爬虫,selenium,python]\n---  \n\n\n# 抖音视频的抓取2\n\n---\n\n> 上一篇实现了对指定用户抖音视频的批量下载工作，本篇重点解决滑块验证的相关问题。\n>\n> ***本篇所涉及验证码自动识别的算法成功率不高且仅是博主个人学习使用，若有商用痕迹均与本人无关，本人对此不负任何责任***\n\n## 问题分析\n\n滑块验证有两步操作，第一步是对图片进行分析找到缺口坐标，第二步是实现鼠标拖动滑块的功能。\n\n确定任务后，接下来先实现第二步。\n\n## 仿真的滑块拖拽动作\n\n找到滑块并不难，在html界面很容易就通过xpath定位到滑块的位置\n\n```python\nhuakuai = wd.find_element(By.XPATH,'//*[@id=\"secsdk-captcha-drag-wrapper\"]/div[2]')\n```\n\n之后使用曾经用过的拖拽方法dragAndDropBy让滑块移动一个距离就解决了\n\n```python\nwebdriver.ActionChains(driver).drag_and_drop_by_offset(sourceEle, targetEleXOffset, targetEleYOffset).perform()\n```\n\n运行时发现这样并不能完成验证，原来是这种直接拖拽的方法太**不像人**了[/笑哭]，所以我们另写一个方法来模拟人的滑动操作。\n\n```python\ndef get_track(distance):  # diatance表示滑块移动的距离\n\ttrack = []\n\tcurrent = 0\n\tmid = distance * 3 / 4\n\tt = 0.2\n\tv = 0\n\twhile current < distance:\n\t\tif current < mid:\n\t\t\ta = 2\n\t\telse:\n\t\t\ta = -3\n\t\tv0 = v\n\t\tv = v0 + a * t\n\t\tmove = v0 * t + 1 / 2 * a * t * t\n\t\tcurrent += move\n\t\ttrack.append(round(move))\n\treturn track\n```\n\n\n\n有了这个方法，我们只需要按照返回值依次拖拽滑块多次，最后再释放鼠标的点击，就能做到滑块的拖动了\n\n```python\nmouse = ActionChains(wd)\ntrack = get_track(getDistance())\nmouse.click_and_hold(huakuai).perform()\nfor x in track:\n    mouse.move_by_offset(x,0).perform()\ntime.sleep(0.5)\nmouse.release().perform()\n```\n\n---\n\n## 识别缺口位置\n\n这里有多种方法，以下是我所参考的两种\n\n1. 使用目标检测的方法训练一个模型，通过模型来预测每一次的缺口位置，这种方法需要准备百余张图片来标注并划分集合。采用YOLO或者Faster R-CNN方法进行训练，优点是预测准确率高，缺点是工作量较大\n2. 使用openCV对图像进行简单处理，通过相邻位置的灰度判断缺口位置，缺点就是预测准确率低，优点是工作量较小，*代码是现成的*。\n\n经过考虑还是先选择了方法2，先测试方法能不能跑通再进行优化。\n\n```python\nimport cv2\nimport numpy as np\n \ndef show(name):\n\tcv2.imshow('Show', name)\n\tcv2.waitKey(0)\n\tcv2.destroyAllWindows()\n \ndef main():\n\totemp = 'template.jpeg'\n\toblk = 'target.png'\n\ttarget = cv2.imread(oblk, 0)\n\ttemplate = cv2.imread(otemp, 0)\n\tw, h = target.shape[::-1]\n\ttemp = 'temp.jpg'\n\ttarg = 'targ.jpg'\n\tcv2.imwrite(temp, template)\n\tcv2.imwrite(targ, target)\n\ttarget = cv2.imread(targ)\n\ttarget = cv2.cvtColor(target, cv2.COLOR_BGR2GRAY)\n\ttarget = abs(255 - target)\n\tcv2.imwrite(targ, target)\n\ttarget = cv2.imread(targ)\n\ttemplate = cv2.imread(temp)\n\tresult = cv2.matchTemplate(target, template, cv2.TM_CCOEFF_NORMED)\n\tx, y = np.unravel_index(result.argmax(), result.shape)\n\t# 展示圈出来的区域\n\tprint(w,h)\n\tprint(x,y)\n\tprint(x*1.25)\n\tcv2.rectangle(template, (y, x), (y + w, x + h), (7, 249, 151), 2)\n\tshow(template)\n \nif __name__ == '__main__':\n\tmain()\n```\n\n这里先贴出该方法的源码，经过我的测试，返回的y值就是滑块需要移动的距离，但是很坑的一点是这个距离要随着显示器的缩放比例而调整，例如我的显示比例是150%，就需要返回2/3的y。\n\n最终效果如下所示\n\n![最终效果1](https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E6%8A%96%E9%9F%B32/%E6%8A%96%E9%9F%B32%20gif.gif)\n\n![最终效果2](https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E6%8A%96%E9%9F%B32/%E6%8A%96%E9%9F%B32%20gif2.gif)\n\n但是成功率并不高:-)\n\n\n\n## 后记\n\n本来这周打算用目标检测的方法重新实现缺口的识别，没想到老板说你这个先作为兴趣吧，让我去用手机模拟器上抖音app下视频，那这个系列就先这样了。日后有缘再更新~ ~~其实是完结了~~\n\n","slug":"抖音视频的抓取2","published":1,"updated":"2021-12-01T07:10:16.401Z","_id":"ckwm9ozxv0003vxov4611e3gv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"抖音视频的抓取2\"><a href=\"#抖音视频的抓取2\" class=\"headerlink\" title=\"抖音视频的抓取2\"></a>抖音视频的抓取2</h1><hr>\n<blockquote>\n<p>上一篇实现了对指定用户抖音视频的批量下载工作，本篇重点解决滑块验证的相关问题。</p>\n<p><em><strong>本篇所涉及验证码自动识别的算法成功率不高且仅是博主个人学习使用，若有商用痕迹均与本人无关，本人对此不负任何责任</strong></em></p>\n</blockquote>\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>滑块验证有两步操作，第一步是对图片进行分析找到缺口坐标，第二步是实现鼠标拖动滑块的功能。</p>\n<p>确定任务后，接下来先实现第二步。</p>\n<h2 id=\"仿真的滑块拖拽动作\"><a href=\"#仿真的滑块拖拽动作\" class=\"headerlink\" title=\"仿真的滑块拖拽动作\"></a>仿真的滑块拖拽动作</h2><p>找到滑块并不难，在html界面很容易就通过xpath定位到滑块的位置</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">huakuai <span class=\"token operator\">=</span> wd<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span><span class=\"token string\">'//*[@id=\"secsdk-captcha-drag-wrapper\"]/div[2]'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>之后使用曾经用过的拖拽方法dragAndDropBy让滑块移动一个距离就解决了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">webdriver<span class=\"token punctuation\">.</span>ActionChains<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>drag_and_drop_by_offset<span class=\"token punctuation\">(</span>sourceEle<span class=\"token punctuation\">,</span> targetEleXOffset<span class=\"token punctuation\">,</span> targetEleYOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行时发现这样并不能完成验证，原来是这种直接拖拽的方法太<strong>不像人</strong>了[/笑哭]，所以我们另写一个方法来模拟人的滑动操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_track</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># diatance表示滑块移动的距离</span>\n\ttrack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\tcurrent <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\tmid <span class=\"token operator\">=</span> distance <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span>\n\tt <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span>\n\tv <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">while</span> current <span class=\"token operator\">&lt;</span> distance<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> current <span class=\"token operator\">&lt;</span> mid<span class=\"token punctuation\">:</span>\n\t\t\ta <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\ta <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span>\n\t\tv0 <span class=\"token operator\">=</span> v\n\t\tv <span class=\"token operator\">=</span> v0 <span class=\"token operator\">+</span> a <span class=\"token operator\">*</span> t\n\t\tmove <span class=\"token operator\">=</span> v0 <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> a <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> t\n\t\tcurrent <span class=\"token operator\">+=</span> move\n\t\ttrack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>move<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> track<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>有了这个方法，我们只需要按照返回值依次拖拽滑块多次，最后再释放鼠标的点击，就能做到滑块的拖动了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">mouse <span class=\"token operator\">=</span> ActionChains<span class=\"token punctuation\">(</span>wd<span class=\"token punctuation\">)</span>\ntrack <span class=\"token operator\">=</span> get_track<span class=\"token punctuation\">(</span>getDistance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmouse<span class=\"token punctuation\">.</span>click_and_hold<span class=\"token punctuation\">(</span>huakuai<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> track<span class=\"token punctuation\">:</span>\n    mouse<span class=\"token punctuation\">.</span>move_by_offset<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\nmouse<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"识别缺口位置\"><a href=\"#识别缺口位置\" class=\"headerlink\" title=\"识别缺口位置\"></a>识别缺口位置</h2><p>这里有多种方法，以下是我所参考的两种</p>\n<ol>\n<li>使用目标检测的方法训练一个模型，通过模型来预测每一次的缺口位置，这种方法需要准备百余张图片来标注并划分集合。采用YOLO或者Faster R-CNN方法进行训练，优点是预测准确率高，缺点是工作量较大</li>\n<li>使用openCV对图像进行简单处理，通过相邻位置的灰度判断缺口位置，缺点就是预测准确率低，优点是工作量较小，<em>代码是现成的</em>。</li>\n</ol>\n<p>经过考虑还是先选择了方法2，先测试方法能不能跑通再进行优化。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n \n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tcv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'Show'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\tcv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tcv2<span class=\"token punctuation\">.</span>destroyAllWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\totemp <span class=\"token operator\">=</span> <span class=\"token string\">'template.jpeg'</span>\n\toblk <span class=\"token operator\">=</span> <span class=\"token string\">'target.png'</span>\n\ttarget <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>oblk<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\ttemplate <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>otemp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tw<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\ttemp <span class=\"token operator\">=</span> <span class=\"token string\">'temp.jpg'</span>\n\ttarg <span class=\"token operator\">=</span> <span class=\"token string\">'targ.jpg'</span>\n\tcv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> template<span class=\"token punctuation\">)</span>\n\tcv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>targ<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n\ttarget <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>targ<span class=\"token punctuation\">)</span>\n\ttarget <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\n\ttarget <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span> <span class=\"token operator\">-</span> target<span class=\"token punctuation\">)</span>\n\tcv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>targ<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n\ttarget <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>targ<span class=\"token punctuation\">)</span>\n\ttemplate <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n\tresult <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>matchTemplate<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> template<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>TM_CCOEFF_NORMED<span class=\"token punctuation\">)</span>\n\tx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>unravel_index<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\"># 展示圈出来的区域</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span><span class=\"token number\">1.25</span><span class=\"token punctuation\">)</span>\n\tcv2<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> w<span class=\"token punctuation\">,</span> x <span class=\"token operator\">+</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">249</span><span class=\"token punctuation\">,</span> <span class=\"token number\">151</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tshow<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\tmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里先贴出该方法的源码，经过我的测试，返回的y值就是滑块需要移动的距离，但是很坑的一点是这个距离要随着显示器的缩放比例而调整，例如我的显示比例是150%，就需要返回2/3的y。</p>\n<p>最终效果如下所示</p>\n<p><img src=\"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E6%8A%96%E9%9F%B32/%E6%8A%96%E9%9F%B32%20gif.gif\" alt=\"最终效果1\"></p>\n<p><img src=\"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E6%8A%96%E9%9F%B32/%E6%8A%96%E9%9F%B32%20gif2.gif\" alt=\"最终效果2\"></p>\n<p>但是成功率并不高:-)</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>本来这周打算用目标检测的方法重新实现缺口的识别，没想到老板说你这个先作为兴趣吧，让我去用手机模拟器上抖音app下视频，那这个系列就先这样了。日后有缘再更新~ <del>其实是完结了</del></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":null,"link_list":[{"name":"寒梦","link":"https://siegelion.cn","avatar":"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E7%8C%9B%E7%94%B7.jpg","descr":"不是孟男的猛男"}]}]}},"excerpt":"","more":"<h1 id=\"抖音视频的抓取2\"><a href=\"#抖音视频的抓取2\" class=\"headerlink\" title=\"抖音视频的抓取2\"></a>抖音视频的抓取2</h1><hr>\n<blockquote>\n<p>上一篇实现了对指定用户抖音视频的批量下载工作，本篇重点解决滑块验证的相关问题。</p>\n<p><em><strong>本篇所涉及验证码自动识别的算法成功率不高且仅是博主个人学习使用，若有商用痕迹均与本人无关，本人对此不负任何责任</strong></em></p>\n</blockquote>\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>滑块验证有两步操作，第一步是对图片进行分析找到缺口坐标，第二步是实现鼠标拖动滑块的功能。</p>\n<p>确定任务后，接下来先实现第二步。</p>\n<h2 id=\"仿真的滑块拖拽动作\"><a href=\"#仿真的滑块拖拽动作\" class=\"headerlink\" title=\"仿真的滑块拖拽动作\"></a>仿真的滑块拖拽动作</h2><p>找到滑块并不难，在html界面很容易就通过xpath定位到滑块的位置</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">huakuai <span class=\"token operator\">=</span> wd<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span><span class=\"token string\">'//*[@id=\"secsdk-captcha-drag-wrapper\"]/div[2]'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>之后使用曾经用过的拖拽方法dragAndDropBy让滑块移动一个距离就解决了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">webdriver<span class=\"token punctuation\">.</span>ActionChains<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>drag_and_drop_by_offset<span class=\"token punctuation\">(</span>sourceEle<span class=\"token punctuation\">,</span> targetEleXOffset<span class=\"token punctuation\">,</span> targetEleYOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行时发现这样并不能完成验证，原来是这种直接拖拽的方法太<strong>不像人</strong>了[/笑哭]，所以我们另写一个方法来模拟人的滑动操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_track</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># diatance表示滑块移动的距离</span>\n\ttrack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\tcurrent <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\tmid <span class=\"token operator\">=</span> distance <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span>\n\tt <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span>\n\tv <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">while</span> current <span class=\"token operator\">&lt;</span> distance<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> current <span class=\"token operator\">&lt;</span> mid<span class=\"token punctuation\">:</span>\n\t\t\ta <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\ta <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span>\n\t\tv0 <span class=\"token operator\">=</span> v\n\t\tv <span class=\"token operator\">=</span> v0 <span class=\"token operator\">+</span> a <span class=\"token operator\">*</span> t\n\t\tmove <span class=\"token operator\">=</span> v0 <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> a <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> t\n\t\tcurrent <span class=\"token operator\">+=</span> move\n\t\ttrack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>move<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> track<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>有了这个方法，我们只需要按照返回值依次拖拽滑块多次，最后再释放鼠标的点击，就能做到滑块的拖动了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">mouse <span class=\"token operator\">=</span> ActionChains<span class=\"token punctuation\">(</span>wd<span class=\"token punctuation\">)</span>\ntrack <span class=\"token operator\">=</span> get_track<span class=\"token punctuation\">(</span>getDistance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmouse<span class=\"token punctuation\">.</span>click_and_hold<span class=\"token punctuation\">(</span>huakuai<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> track<span class=\"token punctuation\">:</span>\n    mouse<span class=\"token punctuation\">.</span>move_by_offset<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\nmouse<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>perform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"识别缺口位置\"><a href=\"#识别缺口位置\" class=\"headerlink\" title=\"识别缺口位置\"></a>识别缺口位置</h2><p>这里有多种方法，以下是我所参考的两种</p>\n<ol>\n<li>使用目标检测的方法训练一个模型，通过模型来预测每一次的缺口位置，这种方法需要准备百余张图片来标注并划分集合。采用YOLO或者Faster R-CNN方法进行训练，优点是预测准确率高，缺点是工作量较大</li>\n<li>使用openCV对图像进行简单处理，通过相邻位置的灰度判断缺口位置，缺点就是预测准确率低，优点是工作量较小，<em>代码是现成的</em>。</li>\n</ol>\n<p>经过考虑还是先选择了方法2，先测试方法能不能跑通再进行优化。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n \n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tcv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'Show'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\tcv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tcv2<span class=\"token punctuation\">.</span>destroyAllWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\totemp <span class=\"token operator\">=</span> <span class=\"token string\">'template.jpeg'</span>\n\toblk <span class=\"token operator\">=</span> <span class=\"token string\">'target.png'</span>\n\ttarget <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>oblk<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\ttemplate <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>otemp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tw<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\ttemp <span class=\"token operator\">=</span> <span class=\"token string\">'temp.jpg'</span>\n\ttarg <span class=\"token operator\">=</span> <span class=\"token string\">'targ.jpg'</span>\n\tcv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> template<span class=\"token punctuation\">)</span>\n\tcv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>targ<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n\ttarget <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>targ<span class=\"token punctuation\">)</span>\n\ttarget <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\n\ttarget <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span> <span class=\"token operator\">-</span> target<span class=\"token punctuation\">)</span>\n\tcv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>targ<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n\ttarget <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>targ<span class=\"token punctuation\">)</span>\n\ttemplate <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n\tresult <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>matchTemplate<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> template<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>TM_CCOEFF_NORMED<span class=\"token punctuation\">)</span>\n\tx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>unravel_index<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\"># 展示圈出来的区域</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span><span class=\"token number\">1.25</span><span class=\"token punctuation\">)</span>\n\tcv2<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> w<span class=\"token punctuation\">,</span> x <span class=\"token operator\">+</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">249</span><span class=\"token punctuation\">,</span> <span class=\"token number\">151</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tshow<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\tmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里先贴出该方法的源码，经过我的测试，返回的y值就是滑块需要移动的距离，但是很坑的一点是这个距离要随着显示器的缩放比例而调整，例如我的显示比例是150%，就需要返回2/3的y。</p>\n<p>最终效果如下所示</p>\n<p><img src=\"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E6%8A%96%E9%9F%B32/%E6%8A%96%E9%9F%B32%20gif.gif\" alt=\"最终效果1\"></p>\n<p><img src=\"https://leo-de-blog.oss-cn-beijing.aliyuncs.com/%E6%8A%96%E9%9F%B32/%E6%8A%96%E9%9F%B32%20gif2.gif\" alt=\"最终效果2\"></p>\n<p>但是成功率并不高:-)</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>本来这周打算用目标检测的方法重新实现缺口的识别，没想到老板说你这个先作为兴趣吧，让我去用手机模拟器上抖音app下视频，那这个系列就先这样了。日后有缘再更新~ <del>其实是完结了</del></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckwm9ozxr0001vxov0rau1tgn","category_id":"ckwn6m0fi000057ovcaggd9z0","_id":"ckwn6m0fl000357ov2gts6a77"},{"post_id":"ckwm9ozxv0003vxov4611e3gv","category_id":"ckwn6m0fi000057ovcaggd9z0","_id":"ckwn6w8h000026covh4de5jqh"}],"PostTag":[{"post_id":"ckwm9ozxr0001vxov0rau1tgn","tag_id":"ckwn6udgf00005zov0zm49450","_id":"ckwn6udgi00035zovgygyapyn"},{"post_id":"ckwm9ozxr0001vxov0rau1tgn","tag_id":"ckwn6udgh00015zovd4qmhey9","_id":"ckwn6udgi00045zov03woharm"},{"post_id":"ckwm9ozxr0001vxov0rau1tgn","tag_id":"ckwn6udgi00025zov2fcz5fjl","_id":"ckwn6udgj00055zovc967ewxw"},{"post_id":"ckwm9ozxv0003vxov4611e3gv","tag_id":"ckwn6udgh00015zovd4qmhey9","_id":"ckwn6w8gz00006covajxbgze8"},{"post_id":"ckwm9ozxv0003vxov4611e3gv","tag_id":"ckwn6udgf00005zov0zm49450","_id":"ckwn6w8h000016covbj1mecjk"},{"post_id":"ckwm9ozxv0003vxov4611e3gv","tag_id":"ckwn6udgi00025zov2fcz5fjl","_id":"ckwn6w8h000036cov3j9q0ju1"}],"Tag":[{"name":"selenium 爬虫 python","_id":"ckwn6m0fk000157ov0fncdwk6"},{"name":"selenium,爬虫,python","_id":"ckwn6p5t600005kov9h0r5gi5"},{"name":"selenium","_id":"ckwn6udgf00005zov0zm49450"},{"name":"爬虫","_id":"ckwn6udgh00015zovd4qmhey9"},{"name":"python","_id":"ckwn6udgi00025zov2fcz5fjl"}]}}